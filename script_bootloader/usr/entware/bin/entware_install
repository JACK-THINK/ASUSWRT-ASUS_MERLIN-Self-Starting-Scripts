#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL=$(nvram get model)
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT=$(nvram get script_usbmount | sed 's/\/script_bootloader.*//')
#
# SBL_SITE: The directory which contains all the sites
# 设置自定义变量SBL_SITE为站点目录
SBL_SITE=${USB_MOUNT_POINT}/www
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="ENTWARE"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALLATION"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
logger -st "($(basename $0))" $$ "*--------- ${SERVICE_NAME} ON ${ROUTER_MODEL} ${SERVICE_FUNCTION} ---------*"
#
########## END ##########
#
#
########## INSTALLATION CONFIGURATION ##########
#
# Check the architecture of the ASUS Router
# 检查华硕路由器架构
ROUTER_ARCHITECTURE=$(uname -m)
#
########## END ##########
#
#
########## INSTALL ENTWARE ##########
#
# Install Entware according to the architecture of the ASUS Router
# 根据路由器架构，自动安装适当版本的Entware
if [ ${ROUTER_ARCHITECTURE} == "aarch64" ]
then
    wget -O - http://bin.entware.net/aarch64-k3.10/installer/generic.sh | sh
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS BEEN COMPLETE *****"
    #
elif [ ${ROUTER_ARCHITECTURE} == "armv7l" ]
then
    wget -O - http://bin.entware.net/armv7sf-k2.6/installer/generic.sh | sh
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS BEEN COMPLETE *****"
    #
elif [ ${ROUTER_ARCHITECTURE} == "mips" ]
then
    wget -O - http://pkg.entware.net/binaries/mipsel/installer/installer.sh | sh
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS BEEN COMPLETE *****"
    #
else
    # Do nothing but prompt the user
    # 如果路由器架构不符合上述三种情况，则执行
    logger -st "($(basename $0))" $$ "***** ROUTER ARCHITECTURE IS UNKNOWN *****"
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS NOT BEEN COMPLETE *****"
    exit 1
fi
#
########## END ##########
#
#
########## COPY HOME ##########
#
logger -st "($(basename $0))" $$ "***** COPY HOME TO USB FLASH DRIVE *****"
#
# Check if HOME is already in the USB flash drive
# 检查目录${USB_MOUNT_POINT}/home/root/是否存在
if [ ! -d "${USB_MOUNT_POINT}/home/root/" ]
then
    # Copy /tmp/home/root to ${USB_MOUNT_POINT}/home/
    # 如果目录${USB_MOUNT_POINT}/home/root/不存在，则执行
    cp -R /tmp/home/root ${USB_MOUNT_POINT}/home/
    logger -st "($(basename $0))" $$ "***** HOME HAS BEEN COPIED *****"
    #
else
    # Do nothing but prompt the user
    # 如果目录${USB_MOUNT_POINT}/home/root/存在，则执行
    logger -st "($(basename $0))" $$ "***** HOME EXISTS *****"
fi
#
########## END ##########
#
#
########## CREATE DIRECTORY ${SBL_SITE} ##########
#
logger -st "($(basename $0))" $$ "***** CREATE DIRECTORY ${SBL_SITE} *****"
#
# Check if directory ${SBL_SITE} exists
# 检查目录${SBL_SITE}是否存在
if [ ! -d "${SBL_SITE}" ]
then
    # Create directory ${SBL_SITE}
    # 如果目录${SBL_SITE}不存在，则执行
    mkdir ${SBL_SITE}
    #
    logger -st "($(basename $0))" $$ "***** ${SBL_SITE} HAS BEEN CREATED *****"
    #
else
    # Do nothing but prompt the user
    # 如果目录${SBL_SITE}存在，则执行
    logger -st "($(basename $0))" $$ "***** ${SBL_SITE} EXISTS *****"
fi
#
########## END ##########